{"version":3,"sources":["components/cell/Cell.js","sudokus/sudokus.js","components/Board.js","components/Buttons.js","App.js","index.js"],"names":["Cell","props","state","cells","handleChange","bind","solution","i","x","y","push","id","value","group","defineGroup","parseInt","original","groups","1","2","3","4","5","6","7","8","9","c","n","includes","this","handleWin","event","html_cell","target","number","new_cells","valid_move","length","console","log","cell","column_ok","state_cell","column","forEach","check_column","row_ok","row","check_row","group_ok","String","check_group","check_move","setState","count","check_full","className","setTimeout","split","renderCells","data","return_array","readOnly","onChange","insert_cells","React","Component","sudokus","Board","Math","floor","random","filtered_solution","string","difficulty","final_string","filter_solution","full_s","Buttons","handleDifficulty","onClick","App","new_difficulty","win","win_text","class","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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,KAEvBG,QAAQC,IAAIV,KAAK7B,OACjB6B,KAAK7B,MAAM8B,eAGbE,EAAUwB,UAAV,UAAyBxB,EAAUwB,UAAnC,aACAC,YAAW,WACTzB,EAAUwB,UAAYxB,EAAUwB,UAAUE,MAAM,KAAK,KACpD,S,oBAIP,WA+BE,IACMC,EA/BN,SAAsBC,EAAMzD,GAE1B,IADA,IAAI0D,EAAe,GACVvD,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAIF,EAAI,GAAKA,IACrB,GAALE,IACFA,EAAI,EACJD,KAEmB,IAAjBqD,EAAKtD,GAAGK,OAAeiD,EAAKtD,GAAGS,SACjC8C,EAAapD,KAAK,uBACEC,GAAIkD,EAAKtD,GAAGI,GACZ8C,UAAU,cACVjD,EAAGA,EACHC,EAAGA,EACHG,MAAOiD,EAAKtD,GAAGK,MACfmD,UAAQ,KAG5BD,EAAapD,KAAK,uBACEC,GAAIkD,EAAKtD,GAAGI,GACZ8C,UAAU,OACVjD,EAAGA,EACHC,EAAGA,EACHG,MAAOiD,EAAKtD,GAAGK,MACfoD,SAAU5D,KAGhCK,IAEF,OAAOqD,EAGWG,CADDnC,KAAK5B,MAAMC,MACe2B,KAAK1B,cAClD,OACE,8BACGwD,Q,GA1MUM,IAAMC,WCmGRC,EAtGD,CACZ,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,qFCjEWC,E,4JA5Bb,WAiBE,IAAI/D,EAAsB8D,EAHVE,KAAKC,MAAsB,IAAhBD,KAAKE,WAI5BC,EAjBJ,SAAyBC,EAAQC,GAE/B,IADA,IAAIC,EAAe,GACVrE,EAAE,EAAIA,EAAI,GAAKA,IAElB+D,KAAKC,MAAsB,IAAhBD,KAAKE,WAAmBG,EACrCC,GAAgBF,EAAOnE,GAEvBqE,GAAgB,IAGpB,OAAOA,EAOeC,CAAgBvE,EAAUwB,KAAK7B,MAAM0E,YAE7D,OACE,qBAAKlB,UAAU,QAAf,SACE,cAAC,EAAD,CAAM1B,UAAWD,KAAK7B,MAAM8B,UAAuCzB,SAAUmE,EAAmBK,OAAQxE,GAA5DwB,KAAK7B,MAAM0E,kB,GAvB3CT,IAAMC,WC4BXY,G,kNA9BbC,iBAAmB,SAAAhD,GACjB,IAAI2C,EAAa3C,EAAME,OAAOtB,MAC9B,EAAKX,MAAM+E,iBAAiBL,I,4CAG9B,WACE,OACE,qBAAKlB,UAAU,UAAf,SACE,wCACA,wBACEwB,QAASnD,KAAKkD,iBACdvB,UAAU,SACV7C,MAAO,GAHT,kBAKA,wBACEqE,QAASnD,KAAKkD,iBACdvB,UAAU,SACV7C,MAAO,GAHT,oBAKA,wBACEqE,QAASnD,KAAKkD,iBACdvB,UAAU,SACV7C,MAAO,GAHT,2B,GApBcsD,IAAMC,YC2Cbe,E,kDAvCb,aAAe,IAAD,8BACZ,gBASFF,iBAAmB,SAACG,GAClB,EAAK7B,SAAS,CACZqB,WAAYQ,EACZC,KAAK,KAbK,EAgBdrD,UAAY,WACV,EAAKuB,UAAS,SAAApD,GAAK,MAAK,CACtByE,WAAYzE,EAAMyE,WAClBS,KAAMlF,EAAMkF,SAjBd,EAAKlF,MAAQ,CACXyE,WAAY,GACZS,KAAK,GAEP,EAAKJ,iBAAmB,EAAKA,iBAAiB3E,KAAtB,gBACxB,EAAK0B,UAAY,EAAKA,UAAU1B,KAAf,gBAPL,E,0CAuBd,WACE,IAAMgF,EAAW,WACjB,OACE,sBAAK5B,UAAU,MAAf,UACE,+BACE,uBAAM6B,MAAM,WAAZ,cAAyBxD,KAAK5B,MAAMkF,KAAOC,EAA3C,OADF,SAGG,uBAAMC,MAAM,WAAZ,cAAyBxD,KAAK5B,MAAMkF,KAAOC,QAE9C,cAAC,EAAD,CAAOtD,UAAWD,KAAKC,UAAW4C,WAAY7C,KAAK5B,MAAMyE,aACzD,cAAC,EAAD,CAASK,iBAAkBlD,KAAKkD,0B,GAlCtBd,IAAMC,WCDxBoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cd25d40b.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cells: []\n    }\n    this.handleChange = this.handleChange.bind(this)\n    const solution = this.props.solution\n    for (let i=0,x=0,y=0 ; i < 81 ; i++) {\n      if (y === 9) {\n        y = 0\n        x++\n      }\n      if (solution[i] == \" \") {\n        this.state.cells.push({\n                                id: i,\n                                value: \"\",\n                                group: defineGroup(i),\n                                x: x,\n                                y: y\n                              })\n      } else {\n        this.state.cells.push({\n                                id: i,\n                                value: parseInt(solution[i]),\n                                original: true,\n                                group: defineGroup(i),\n                                x: x,\n                                y: y\n                              })\n      }\n      y++\n    }\n    function defineGroup(i) {\n      let groups = {1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[], 8:[], 9:[]}\n      for (let x=0, c=1; x < 62;) {\n        groups[c].push(x, x+1, x+2, x+9, x+10, x+11, x+18, x+19, x+20)\n        x += 3\n        c++\n        if (x == 9 || x == 36) {\n          x += 18\n        }\n      }\n      // Search in groups\n      for (let n=1;n<=9;n++) {\n        if (groups[n].includes(i)) {\n          return n\n        }\n      }\n    }\n  }\n\n  handleWin() {\n    this.props.handleWin()\n  }\n\n  handleChange(event) {\n    function check_column(cell, cells) {\n      const cell_id = cell.id\n      const state_cell = cells[cell_id]\n      let column = []\n      cells.forEach(c => {\n        if (c.y == state_cell.y) {\n          column.push(c.value)\n        }\n      })\n      if (column.includes(parseInt(cell.value))) {\n        console.log('column wrong')\n        return false\n      }\n      return true\n    }\n    function check_row(cell, cells) {\n      const cell_id = cell.id\n      const state_cell = cells[cell_id]\n      let row = []\n      cells.forEach(c => {\n        if (c.x == state_cell.x) {\n          row.push(c.value)\n        }\n      })\n      if (row.includes(parseInt(cell.value))) {\n        console.log('row wrong')\n        return false\n      }\n      return true\n    }\n    function check_group(cell, cells){\n      const cell_id = cell.id\n      const state_cell = cells[cell_id]\n      const group = []\n      cells.forEach(c => {\n        if (c.group == state_cell.group) {\n          group.push(c.value)\n        }\n      })\n      if (group.includes(parseInt(cell.value)) || group.includes(String(cell.value))) {\n        console.log('group wrong')\n        return false\n      }\n      return true\n    }\n    function check_move(cell, cells) {\n      const column_ok = check_column(cell, cells)\n      const row_ok = check_row(cell, cells)\n      const group_ok = check_group(cell, cells)\n      if (column_ok && row_ok && group_ok) {\n        return true\n      }\n      return false\n    }\n    function check_full(new_cells) {\n      let count = 0\n      new_cells.forEach(cell => {\n        if (cell.value === \"\") {\n          count += 1\n        }\n      })\n      if (count == 0) {\n        return true\n      }\n      return false\n    }\n    const html_cell = event.target\n    const id = event.target.id\n    const number = event.target.value\n    let new_cells = this.state.cells\n    const group = new_cells[id].group\n    const x = new_cells[id].x\n    const y = new_cells[id].y\n    let valid_move = true\n    let full_sudoku = false\n\n    if (event.target.value.length > 1) {\n      console.log('only 1 number')\n      return\n    }\n    if(number !== \"\") {\n      valid_move = check_move(event.target, this.state.cells)\n    }\n    if (number === \"\") {\n      new_cells[id] = {id: parseInt(id), value: \"\", group:group, x:x, y:y}\n      this.setState({\n        cells: new_cells\n      })\n    } else if (valid_move) {\n      // let new_cells = this.state.cells\n      // const group = new_cells[id].group\n      // const x = new_cells[id].x\n      // const y = new_cells[id].y\n      new_cells[id] = {id: parseInt(id), value: parseInt(number), group:group, x:x, y:y}\n      this.setState({\n        cells: new_cells\n      })\n      full_sudoku = check_full(new_cells)\n      if (full_sudoku) {\n        console.log(this.props)\n        this.props.handleWin()\n      }\n    } else {\n      html_cell.className = `${html_cell.className} bad_cell`\n      setTimeout(() => {\n        html_cell.className = html_cell.className.split(\" \")[0]\n      }, 200);\n    }\n  }\n\n  render() {\n    function insert_cells(data, handleChange) {\n      let return_array = []\n      for (let i=0,x=0,y=0 ; i < 81 ; i++) {\n        if (y == 9) {\n          y = 0\n          x++\n        }\n        if (data[i].value != \"\" && data[i].original) {\n          return_array.push(<input\n                              id={data[i].id}\n                              className='filled_cell'\n                              x={x}\n                              y={y}\n                              value={data[i].value}\n                              readOnly\n                            />)\n        } else {\n          return_array.push(<input\n                              id={data[i].id}\n                              className='cell'\n                              x={x}\n                              y={y}\n                              value={data[i].value}\n                              onChange={handleChange}\n                            />)\n        }\n        y++\n      }\n      return return_array\n    }\n    const cells_data = this.state.cells\n    const renderCells = insert_cells(cells_data, this.handleChange)\n    return (\n      <div>\n        {renderCells}\n      </div>\n    );\n  }\n}\n\nexport default Cell;","const sudokus = [\n    \"864371259325849761971265843436192587198657432257483916689734125713528694542916378\",\n    \"346179258187523964529648371965832417472916835813754629798261543631485792254397186\",\n    \"695127384138459672724836915851264739273981546946573821317692458489715263562348197\",\n    \"497258316186439725253716498629381547375964182841572639962145873718623954534897261\",\n    \"465912378189473562327568149738645291954821637216397854573284916642159783891736425\",\n    \"194685237382974516657213489823491675541768923769352841215839764436527198978146352\",\n    \"289765431317924856645138729763891542521473968894652173432519687956387214178246395\",\n    \"894231657762495183351876942583624719219387564647159328128763495976542831435918276\",\n    \"563472198219386754847195623472638519951247386638519472795864231324951867186723945\",\n    \"163725948584693271729184365946358127371462589852917634498231756637549812215876493\",\n    \"974183652651274389283596714129835476746912538835647921568329147317468295492751863\",\n    \"431567289729481653865329174986243517257198346143756892612975438374812965598634721\",\n    \"254367891893215674716984253532698147178432569649571328421753986365849712987126435\",\n    \"958274163123698754746153928674315289532789416819462375285941637397526841461837592\",\n    \"865379412924581376713642895397164528482795631156823947541236789679418253238957164\",\n    \"865714329917362845234598761142657983783941256596283174358176492429835617671429538\",\n    \"268495317194673852735128964872549631651387249943216785326951478589764123417832596\",\n    \"194685237382974516657213489823491675541768923769352841215839764436527198978146352\",\n    \"712984365346751829589263471624179538853642917197538642978316254461825793235497186\",\n    \"967254318184379562253186947691748235835621794742593681376415829428967153519832476\",\n    \"251479638948316752637258194365124879712983465894567213423691587179845326586732941\",\n    \"256734198891265374347198652514683729728519436963427581135942867689371245472856913\",\n    \"964532178187694235235817964629451783573986412841273596416728359352169847798345621\",\n    \"142569873385217946967438251536871429219654387478923165893746512621385794754192638\",\n    \"598326147314957628672481935753648291421539876869172453285764319936215784147893562\",\n    \"157468293238971645469532781926153478741896532583724916674385129892617354315249867\",\n    \"927384165684915237531672489769231548453768921218459673175826394392147856846593712\",\n    \"398256417476918253512743698185674329924835761763129845257361984831492576649587132\",\n    \"176328459538149672492765138657834921924651387381972564813296745749583216265417893\",\n    \"954738621276415389381692574837564912692183457415927863123846795569371248748259136\",\n    \"183247596295638714647915832452396178718524369369871425921483657534769281876152943\",\n    \"863915274429678351715324896287436915541892637936751482154283769698147523372569148\",\n    \"276495183843271596951863247397528461168749325524316978635982714712654839489137652\",\n    \"831245796726319548954768231419872365368451972275693814587134629193526487642987153\",\n    \"168257439792436158543981672639874521415629783287315964924763815371548296856192347\",\n    \"751432689293168574468759312587243961319675248624981735836524197145397826972816453\",\n    \"318692547254781639697543128563974812721368954849125376176459283485236791932817465\",\n    \"578213649263549178419867352724196835356482791891375264932651487685724913147938526\",\n    \"956417832287536149341298765794153628815762394632984571178649253529371486463825917\",\n    \"632951847814672953759348126391725684476189532285436791548217369927863415163594278\",\n    \"285746913731859624946231587354687192812394756697125348179468235463512879528973461\",\n    \"123897546956413872847265193691378254584921367732546918219634785368759421475182639\",\n    \"851429376973658214264173589438517692629384751517962438346791825185236947792845163\",\n    \"761495823284367159953128467625784931138259674497631582346512798579843216812976345\",\n    \"638917452754326198219584376492873615571269843863145729185732964326491587947658231\",\n    \"538742916694318527217956384871294653345671298962583471123869745786425139459137862\",\n    \"687935241913247568452168793396721854278459316145386927569874132831692475724513689\",\n    \"654837291389214756172965483896451327237689145541723869918346572723598614465172938\",\n    \"192567438873429156564183279387942615251876394946351827739614582618295743425738961\",\n    \"963752481451368972728491356892176534174539268635824197519647823387215649246983715\",\n    \"851347692496582173723169458382675914514298367679413285148726539965834721237951846\",\n    \"158479632963281475472563918215836794684792153397154826521948367839627541746315289\",\n    \"187235496264891735395674182426389571719542863853716249938157624542968317671423958\",\n    \"127398546654172398398564172769831254482659731531427689916745823273986415845213967\",\n    \"925784613843621957716593824372159486598467132461238579634875291187942365259316748\",\n    \"549638721726914853318572946654187392892453617137269584273845169965721438481396275\",\n    \"612453798973618425854927163291784536435269817786135942527391684168542379349876251\",\n    \"538972416761843952249561378412385769376294185985716234654127893193458627827639541\",\n    \"287513964964782315351649782895236471716854293432197856543968127629471538178325649\",\n    \"291845736638927154475136298327498561869751423154362879983574612712689345546213987\",\n    \"537168942286943157914527836873659214145832769692714385328495671751286493469371528\",\n    \"827314965619785432435692187142836759563947821978251346381529674754168293296473518\",\n    \"643587219712936458958421763385269174476813925129745836831674592297358641564192387\",\n    \"562834719314967285798215436973658142126349857485172963639781524251496378847523691\",\n    \"431825796256397418978416235689134572725968341314572689143659827592783164867241953\",\n    \"324857196617239548958614327143528769579463281862791435795346812236185974481972653\",\n    \"743869152628751349951342867182674593579123486436985271865237914317498625294516738\",\n    \"416853279529617843378924615145239786967548321832761594691382457254176938783495162\",\n    \"784235619526971384319864257452398761137426895698517423941683572873152946265749138\",\n    \"823957461415268397679314258958746123237591684146823579582439716764185932391672845\",\n    \"831529467925674183476831529759416238183295746264783951698142375512367894347958612\",\n    \"815947362724563198369218547287354619946721835531689724458196273193872456672435981\",\n    \"654372981781946352932518467163294578428735196579681234296157843347829615815463729\",\n    \"265748913943651728718239456451826379392475681876913245687594132129387564534162897\",\n    \"918743652246951783375682194624178539591234867783596421859427316462315978137869245\",\n    \"142978635376415928985632147421789563639254871857361294594127386268543719713896452\",\n    \"143927685256184973897536142428359716731462859965871234379215468682743591514698327\",\n    \"216597483984123756537648129673954218128736594459812367792365841841279635365481972\",\n    \"278634951935271486416859237743915628681723549529486173394568712152397864867142395\",\n    \"416957238732186954958342617695831742273469581841725369187593426324678195569214873\",\n    \"298541367476382951351769248739426815162835479584197623613258794947613582825974136\",\n    \"187623594453197862962845713376912458895374126214586937639758241548231679721469385\",\n    \"194253687356874921827169435941528763538746192672391548483617259765982314219435876\",\n    \"381457692942861375675932184163579428754286931829143567437618259596724813218395746\",\n    \"958723641423651897176498532739245168684179325215386479847532916391867254562914783\",\n    \"941238657673495821825167934319782546564319278782546319258974163436851792197623485\",\n    \"983746125451298763762351894678423519145679238239185476314867952526914387897532641\",\n    \"294785631513469728867231945382516479479823156156947382938672514745198263621354897\",\n    \"184236957275419386963875124532648719891723645647591832728164593356982471419357268\",\n    \"197684325628531974543792186372459861814367592956218437285173649469825713731946258\",\n    \"932754681761982534485631729259176843873495216146823975594218367318567492627349158\",\n    \"617823945245619873389547621851472369792368154463951287176235498528194736934786512\",\n    \"627981543538247691419356782763498215845123967192675438974832156281569374356714829\",\n    \"298361745534879612617245938361782594975614823842953176126537489459128367783496251\",\n    \"687321549542869371913754862731246985854937126269518734395672418176485293428193657\",\n    \"618732954925148763347956128839267415571493682462815379784321596153689247296574831\",\n    \"392184576658379142714526839845962713179853264236417958487231695921645387563798421\",\n    \"926437518785216943134859627342968175859721436617543892261395784573184269498672351\",\n    \"647238519915476238328519467791652843563784921482391756839125674276843195154967382\",\n    \"456971238821643795397285146634857912782169354519432687268394571173528469945716823\"\n  ]\n  export default sudokus","import React from 'react';\nimport './Board.css';\nimport Cell from './cell/Cell'\nimport sudokus from '../sudokus/sudokus';\n\n\nclass Board extends React.Component {\n  render() {\n    function filter_solution(string, difficulty) {\n      let final_string = \"\"\n      for (let i=0 ; i < 81 ; i++) {\n\n        if (Math.floor(Math.random() * 100) >= difficulty) {\n          final_string += string[i]\n        } else {\n          final_string += \" \"\n        }\n      }\n      return final_string\n    }\n    function get_sudoku(array) {\n      const index = Math.floor(Math.random() * 100)\n      return array[index]\n    }\n    let solution = get_sudoku(sudokus)\n    let filtered_solution = filter_solution(solution, this.props.difficulty)\n\n    return (\n      <div className=\"board\">\n        <Cell handleWin={this.props.handleWin} key={this.props.difficulty} solution={filtered_solution} full_s={solution} />\n      </div>\n    );\n  }\n}\n\nexport default Board;","import React from 'react';\nimport'./Buttons.css'\n\nclass Buttons extends React.Component {\n  handleDifficulty = event => {\n    let difficulty = event.target.value\n    this.props.handleDifficulty(difficulty)\n  }\n\n  render() {\n    return (\n      <div className=\"buttons\">\n        <p> Level:\n        <button\n          onClick={this.handleDifficulty}\n          className=\"button\"\n          value={40}\n        >Easy</button>\n        <button\n          onClick={this.handleDifficulty}\n          className=\"button\"\n          value={60}\n        >Medium</button>\n        <button\n          onClick={this.handleDifficulty}\n          className=\"button\"\n          value={75}\n        >Hard</button>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Buttons","import React from 'react';\nimport './App.css';\nimport Board from './components/Board'\nimport Buttons from './components/Buttons'\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      difficulty: 40,\n      win: false\n    }\n    this.handleDifficulty = this.handleDifficulty.bind(this)\n    this.handleWin = this.handleWin.bind(this)\n  }\n\n  handleDifficulty = (new_difficulty) => {\n    this.setState({\n      difficulty: new_difficulty,\n      win: false\n    })\n  }\n  handleWin = () => {\n    this.setState(state => ({\n      difficulty: state.difficulty,\n      win: !state.win\n    }))\n  }\n\n  render() {\n    const win_text = 'You win!'\n    return (\n      <div className=\"App\">\n        <h1>\n          <span class=\"win-text\"> {this.state.win && win_text} </span>\n          Sudoku\n           <span class=\"win-text\"> {this.state.win && win_text}</span>\n        </h1>\n        <Board handleWin={this.handleWin} difficulty={this.state.difficulty}/>\n        <Buttons handleDifficulty={this.handleDifficulty} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}